// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: test/v1/test.proto

package testv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JsonEnum int32

const (
	JsonEnum_JSON_ENUM_UNSPECIFIED JsonEnum = 0
	JsonEnum_JSON_ENUM_SOME        JsonEnum = 1
)

// Enum value maps for JsonEnum.
var (
	JsonEnum_name = map[int32]string{
		0: "JSON_ENUM_UNSPECIFIED",
		1: "JSON_ENUM_SOME",
	}
	JsonEnum_value = map[string]int32{
		"JSON_ENUM_UNSPECIFIED": 0,
		"JSON_ENUM_SOME":        1,
	}
)

func (x JsonEnum) Enum() *JsonEnum {
	p := new(JsonEnum)
	*p = x
	return p
}

func (x JsonEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JsonEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_test_v1_test_proto_enumTypes[0].Descriptor()
}

func (JsonEnum) Type() protoreflect.EnumType {
	return &file_test_v1_test_proto_enumTypes[0]
}

func (x JsonEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JsonEnum.Descriptor instead.
func (JsonEnum) EnumDescriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{0}
}

type Nested_NestedMessage_NestedEnum int32

const (
	Nested_NestedMessage_NESTED_ENUM_UNSPECIFIED Nested_NestedMessage_NestedEnum = 0
)

// Enum value maps for Nested_NestedMessage_NestedEnum.
var (
	Nested_NestedMessage_NestedEnum_name = map[int32]string{
		0: "NESTED_ENUM_UNSPECIFIED",
	}
	Nested_NestedMessage_NestedEnum_value = map[string]int32{
		"NESTED_ENUM_UNSPECIFIED": 0,
	}
)

func (x Nested_NestedMessage_NestedEnum) Enum() *Nested_NestedMessage_NestedEnum {
	p := new(Nested_NestedMessage_NestedEnum)
	*p = x
	return p
}

func (x Nested_NestedMessage_NestedEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Nested_NestedMessage_NestedEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_test_v1_test_proto_enumTypes[1].Descriptor()
}

func (Nested_NestedMessage_NestedEnum) Type() protoreflect.EnumType {
	return &file_test_v1_test_proto_enumTypes[1]
}

func (x Nested_NestedMessage_NestedEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Nested_NestedMessage_NestedEnum.Descriptor instead.
func (Nested_NestedMessage_NestedEnum) EnumDescriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{13, 0, 0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CaseValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V *structpb.Value `protobuf:"bytes,1,opt,name=v,proto3" json:"v,omitempty"`
	// google.protobuf.Struct s = 2;
	// google.protobuf.ListValue l = 3;
	A *anypb.Any `protobuf:"bytes,4,opt,name=a,proto3" json:"a,omitempty"`
}

func (x *CaseValue) Reset() {
	*x = CaseValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseValue) ProtoMessage() {}

func (x *CaseValue) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseValue.ProtoReflect.Descriptor instead.
func (*CaseValue) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{1}
}

func (x *CaseValue) GetV() *structpb.Value {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *CaseValue) GetA() *anypb.Any {
	if x != nil {
		return x.A
	}
	return nil
}

type Case struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WktI32A    *wrapperspb.Int32Value            `protobuf:"bytes,1,opt,name=wkt_i32_a,json=wktI32A,proto3" json:"wkt_i32_a,omitempty"`
	WktI32B    *wrapperspb.Int32Value            `protobuf:"bytes,2,opt,name=wkt_i32_b,json=wktI32B,proto3" json:"wkt_i32_b,omitempty"`
	OptI32A    *int32                            `protobuf:"varint,3,opt,name=opt_i32_a,json=optI32A,proto3,oneof" json:"opt_i32_a,omitempty"`
	OptI32B    *int32                            `protobuf:"varint,4,opt,name=opt_i32_b,json=optI32B,proto3,oneof" json:"opt_i32_b,omitempty"`
	OptWktI32A *wrapperspb.Int32Value            `protobuf:"bytes,5,opt,name=opt_wkt_i32_a,json=optWktI32A,proto3,oneof" json:"opt_wkt_i32_a,omitempty"`
	OptWktI32B *wrapperspb.Int32Value            `protobuf:"bytes,6,opt,name=opt_wkt_i32_b,json=optWktI32B,proto3,oneof" json:"opt_wkt_i32_b,omitempty"`
	RptWktI32  []*wrapperspb.Int32Value          `protobuf:"bytes,7,rep,name=rpt_wkt_i32,json=rptWktI32,proto3" json:"rpt_wkt_i32,omitempty"`
	MapWktI32  map[string]*wrapperspb.Int32Value `protobuf:"bytes,8,rep,name=map_wkt_i32,json=mapWktI32,proto3" json:"map_wkt_i32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	B1         []byte                            `protobuf:"bytes,21,opt,name=b1,proto3" json:"b1,omitempty"`
	B2         []byte                            `protobuf:"bytes,22,opt,name=b2,proto3" json:"b2,omitempty"`
	OptB1      []byte                            `protobuf:"bytes,23,opt,name=opt_b1,json=optB1,proto3,oneof" json:"opt_b1,omitempty"`
	OptB2      []byte                            `protobuf:"bytes,24,opt,name=opt_b2,json=optB2,proto3,oneof" json:"opt_b2,omitempty"`
	RptB       [][]byte                          `protobuf:"bytes,25,rep,name=rpt_b,json=rptB,proto3" json:"rpt_b,omitempty"`
	MapB       map[string][]byte                 `protobuf:"bytes,26,rep,name=map_b,json=mapB,proto3" json:"map_b,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WktB1      *wrapperspb.BytesValue            `protobuf:"bytes,31,opt,name=wkt_b1,json=wktB1,proto3" json:"wkt_b1,omitempty"`
	WktB2      *wrapperspb.BytesValue            `protobuf:"bytes,32,opt,name=wkt_b2,json=wktB2,proto3" json:"wkt_b2,omitempty"`
	OptWktB1   *wrapperspb.BytesValue            `protobuf:"bytes,33,opt,name=opt_wkt_b1,json=optWktB1,proto3,oneof" json:"opt_wkt_b1,omitempty"`
	OptWktB2   *wrapperspb.BytesValue            `protobuf:"bytes,34,opt,name=opt_wkt_b2,json=optWktB2,proto3,oneof" json:"opt_wkt_b2,omitempty"`
	RptWktB    []*wrapperspb.BytesValue          `protobuf:"bytes,35,rep,name=rpt_wkt_b,json=rptWktB,proto3" json:"rpt_wkt_b,omitempty"`
	MapWktB    map[string]*wrapperspb.BytesValue `protobuf:"bytes,36,rep,name=map_wkt_b,json=mapWktB,proto3" json:"map_wkt_b,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to OneOf:
	//	*Case_OneofWktI32
	//	*Case_OneofB
	//	*Case_OneofWktB
	OneOf     isCase_OneOf                       `protobuf_oneof:"one_of"`
	RptMsg    []*Message                         `protobuf:"bytes,41,rep,name=rpt_msg,json=rptMsg,proto3" json:"rpt_msg,omitempty"`
	MapMsg    map[string]*Message                `protobuf:"bytes,42,rep,name=map_msg,json=mapMsg,proto3" json:"map_msg,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapEnum   map[string]JsonEnum                `protobuf:"bytes,43,rep,name=map_enum,json=mapEnum,proto3" json:"map_enum,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=test.v1.JsonEnum"`
	MapWktU64 map[uint64]*wrapperspb.UInt64Value `protobuf:"bytes,44,rep,name=map_wkt_u64,json=mapWktU64,proto3" json:"map_wkt_u64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WktV      *structpb.Value                    `protobuf:"bytes,51,opt,name=wkt_v,json=wktV,proto3" json:"wkt_v,omitempty"`
	WktS      *structpb.Struct                   `protobuf:"bytes,52,opt,name=wkt_s,json=wktS,proto3" json:"wkt_s,omitempty"`
	WktLv     *structpb.ListValue                `protobuf:"bytes,53,opt,name=wkt_lv,json=wktLv,proto3" json:"wkt_lv,omitempty"`
	RptWktV   []*structpb.Value                  `protobuf:"bytes,54,rep,name=rpt_wkt_v,json=rptWktV,proto3" json:"rpt_wkt_v,omitempty"`
	RptWktS   []*structpb.Struct                 `protobuf:"bytes,55,rep,name=rpt_wkt_s,json=rptWktS,proto3" json:"rpt_wkt_s,omitempty"`
	RptWktLv  []*structpb.ListValue              `protobuf:"bytes,56,rep,name=rpt_wkt_lv,json=rptWktLv,proto3" json:"rpt_wkt_lv,omitempty"`
}

func (x *Case) Reset() {
	*x = Case{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Case) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Case) ProtoMessage() {}

func (x *Case) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Case.ProtoReflect.Descriptor instead.
func (*Case) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{2}
}

func (x *Case) GetWktI32A() *wrapperspb.Int32Value {
	if x != nil {
		return x.WktI32A
	}
	return nil
}

func (x *Case) GetWktI32B() *wrapperspb.Int32Value {
	if x != nil {
		return x.WktI32B
	}
	return nil
}

func (x *Case) GetOptI32A() int32 {
	if x != nil && x.OptI32A != nil {
		return *x.OptI32A
	}
	return 0
}

func (x *Case) GetOptI32B() int32 {
	if x != nil && x.OptI32B != nil {
		return *x.OptI32B
	}
	return 0
}

func (x *Case) GetOptWktI32A() *wrapperspb.Int32Value {
	if x != nil {
		return x.OptWktI32A
	}
	return nil
}

func (x *Case) GetOptWktI32B() *wrapperspb.Int32Value {
	if x != nil {
		return x.OptWktI32B
	}
	return nil
}

func (x *Case) GetRptWktI32() []*wrapperspb.Int32Value {
	if x != nil {
		return x.RptWktI32
	}
	return nil
}

func (x *Case) GetMapWktI32() map[string]*wrapperspb.Int32Value {
	if x != nil {
		return x.MapWktI32
	}
	return nil
}

func (x *Case) GetB1() []byte {
	if x != nil {
		return x.B1
	}
	return nil
}

func (x *Case) GetB2() []byte {
	if x != nil {
		return x.B2
	}
	return nil
}

func (x *Case) GetOptB1() []byte {
	if x != nil {
		return x.OptB1
	}
	return nil
}

func (x *Case) GetOptB2() []byte {
	if x != nil {
		return x.OptB2
	}
	return nil
}

func (x *Case) GetRptB() [][]byte {
	if x != nil {
		return x.RptB
	}
	return nil
}

func (x *Case) GetMapB() map[string][]byte {
	if x != nil {
		return x.MapB
	}
	return nil
}

func (x *Case) GetWktB1() *wrapperspb.BytesValue {
	if x != nil {
		return x.WktB1
	}
	return nil
}

func (x *Case) GetWktB2() *wrapperspb.BytesValue {
	if x != nil {
		return x.WktB2
	}
	return nil
}

func (x *Case) GetOptWktB1() *wrapperspb.BytesValue {
	if x != nil {
		return x.OptWktB1
	}
	return nil
}

func (x *Case) GetOptWktB2() *wrapperspb.BytesValue {
	if x != nil {
		return x.OptWktB2
	}
	return nil
}

func (x *Case) GetRptWktB() []*wrapperspb.BytesValue {
	if x != nil {
		return x.RptWktB
	}
	return nil
}

func (x *Case) GetMapWktB() map[string]*wrapperspb.BytesValue {
	if x != nil {
		return x.MapWktB
	}
	return nil
}

func (m *Case) GetOneOf() isCase_OneOf {
	if m != nil {
		return m.OneOf
	}
	return nil
}

func (x *Case) GetOneofWktI32() *wrapperspb.Int32Value {
	if x, ok := x.GetOneOf().(*Case_OneofWktI32); ok {
		return x.OneofWktI32
	}
	return nil
}

func (x *Case) GetOneofB() []byte {
	if x, ok := x.GetOneOf().(*Case_OneofB); ok {
		return x.OneofB
	}
	return nil
}

func (x *Case) GetOneofWktB() *wrapperspb.BytesValue {
	if x, ok := x.GetOneOf().(*Case_OneofWktB); ok {
		return x.OneofWktB
	}
	return nil
}

func (x *Case) GetRptMsg() []*Message {
	if x != nil {
		return x.RptMsg
	}
	return nil
}

func (x *Case) GetMapMsg() map[string]*Message {
	if x != nil {
		return x.MapMsg
	}
	return nil
}

func (x *Case) GetMapEnum() map[string]JsonEnum {
	if x != nil {
		return x.MapEnum
	}
	return nil
}

func (x *Case) GetMapWktU64() map[uint64]*wrapperspb.UInt64Value {
	if x != nil {
		return x.MapWktU64
	}
	return nil
}

func (x *Case) GetWktV() *structpb.Value {
	if x != nil {
		return x.WktV
	}
	return nil
}

func (x *Case) GetWktS() *structpb.Struct {
	if x != nil {
		return x.WktS
	}
	return nil
}

func (x *Case) GetWktLv() *structpb.ListValue {
	if x != nil {
		return x.WktLv
	}
	return nil
}

func (x *Case) GetRptWktV() []*structpb.Value {
	if x != nil {
		return x.RptWktV
	}
	return nil
}

func (x *Case) GetRptWktS() []*structpb.Struct {
	if x != nil {
		return x.RptWktS
	}
	return nil
}

func (x *Case) GetRptWktLv() []*structpb.ListValue {
	if x != nil {
		return x.RptWktLv
	}
	return nil
}

type isCase_OneOf interface {
	isCase_OneOf()
}

type Case_OneofWktI32 struct {
	OneofWktI32 *wrapperspb.Int32Value `protobuf:"bytes,9,opt,name=oneof_wkt_i32,json=oneofWktI32,proto3,oneof"`
}

type Case_OneofB struct {
	OneofB []byte `protobuf:"bytes,27,opt,name=oneof_b,json=oneofB,proto3,oneof"`
}

type Case_OneofWktB struct {
	OneofWktB *wrapperspb.BytesValue `protobuf:"bytes,37,opt,name=oneof_wkt_b,json=oneofWktB,proto3,oneof"`
}

func (*Case_OneofWktI32) isCase_OneOf() {}

func (*Case_OneofB) isCase_OneOf() {}

func (*Case_OneofWktB) isCase_OneOf() {}

type All struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R              *Repeated     `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S              *Singular     `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	OF             *OneOf        `protobuf:"bytes,3,opt,name=o_f,json=oF,proto3" json:"o_f,omitempty"`
	E              JsonEnum      `protobuf:"varint,4,opt,name=e,proto3,enum=test.v1.JsonEnum" json:"e,omitempty"`
	OWkt           *OneOfWKT     `protobuf:"bytes,5,opt,name=o_wkt,json=oWkt,proto3" json:"o_wkt,omitempty"`
	Wkt            *WKTs         `protobuf:"bytes,6,opt,name=wkt,proto3" json:"wkt,omitempty"`
	O              *Optionals    `protobuf:"bytes,7,opt,name=o,proto3" json:"o,omitempty"`
	RWkt           *RepeatedWKTs `protobuf:"bytes,8,opt,name=r_wkt,json=rWkt,proto3" json:"r_wkt,omitempty"`
	N              *Nested       `protobuf:"bytes,9,opt,name=n,proto3" json:"n,omitempty"`
	M              *Map          `protobuf:"bytes,10,opt,name=m,proto3" json:"m,omitempty"`
	SnakeCase      string        `protobuf:"bytes,11,opt,name=snake_case,json=snakeCase,proto3" json:"snake_case,omitempty"`
	LowerCamelCase string        `protobuf:"bytes,12,opt,name=lowerCamelCase,proto3" json:"lowerCamelCase,omitempty"`
	UpwerCamelCase string        `protobuf:"bytes,13,opt,name=UpwerCamelCase,proto3" json:"UpwerCamelCase,omitempty"`
	OptWkt         *OptionalWKTs `protobuf:"bytes,14,opt,name=opt_wkt,json=optWkt,proto3" json:"opt_wkt,omitempty"`
}

func (x *All) Reset() {
	*x = All{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *All) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*All) ProtoMessage() {}

func (x *All) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use All.ProtoReflect.Descriptor instead.
func (*All) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{3}
}

func (x *All) GetR() *Repeated {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *All) GetS() *Singular {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *All) GetOF() *OneOf {
	if x != nil {
		return x.OF
	}
	return nil
}

func (x *All) GetE() JsonEnum {
	if x != nil {
		return x.E
	}
	return JsonEnum_JSON_ENUM_UNSPECIFIED
}

func (x *All) GetOWkt() *OneOfWKT {
	if x != nil {
		return x.OWkt
	}
	return nil
}

func (x *All) GetWkt() *WKTs {
	if x != nil {
		return x.Wkt
	}
	return nil
}

func (x *All) GetO() *Optionals {
	if x != nil {
		return x.O
	}
	return nil
}

func (x *All) GetRWkt() *RepeatedWKTs {
	if x != nil {
		return x.RWkt
	}
	return nil
}

func (x *All) GetN() *Nested {
	if x != nil {
		return x.N
	}
	return nil
}

func (x *All) GetM() *Map {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *All) GetSnakeCase() string {
	if x != nil {
		return x.SnakeCase
	}
	return ""
}

func (x *All) GetLowerCamelCase() string {
	if x != nil {
		return x.LowerCamelCase
	}
	return ""
}

func (x *All) GetUpwerCamelCase() string {
	if x != nil {
		return x.UpwerCamelCase
	}
	return ""
}

func (x *All) GetOptWkt() *OptionalWKTs {
	if x != nil {
		return x.OptWkt
	}
	return nil
}

type Repeated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S     []string   `protobuf:"bytes,1,rep,name=s,proto3" json:"s,omitempty"`
	I32   []int32    `protobuf:"varint,2,rep,packed,name=i32,proto3" json:"i32,omitempty"`
	I64   []int64    `protobuf:"varint,3,rep,packed,name=i64,proto3" json:"i64,omitempty"`
	U32   []uint32   `protobuf:"varint,4,rep,packed,name=u32,proto3" json:"u32,omitempty"`
	U64   []uint64   `protobuf:"varint,5,rep,packed,name=u64,proto3" json:"u64,omitempty"`
	F32   []float32  `protobuf:"fixed32,6,rep,packed,name=f32,proto3" json:"f32,omitempty"`
	F64   []float64  `protobuf:"fixed64,7,rep,packed,name=f64,proto3" json:"f64,omitempty"`
	Si32  []int32    `protobuf:"zigzag32,8,rep,packed,name=si32,proto3" json:"si32,omitempty"`
	Si64  []int64    `protobuf:"zigzag64,9,rep,packed,name=si64,proto3" json:"si64,omitempty"`
	Fi32  []uint32   `protobuf:"fixed32,10,rep,packed,name=fi32,proto3" json:"fi32,omitempty"`
	Fi64  []uint64   `protobuf:"fixed64,11,rep,packed,name=fi64,proto3" json:"fi64,omitempty"`
	Sfi32 []int32    `protobuf:"fixed32,12,rep,packed,name=sfi32,proto3" json:"sfi32,omitempty"`
	Sfi64 []int64    `protobuf:"fixed64,13,rep,packed,name=sfi64,proto3" json:"sfi64,omitempty"`
	Bl    []bool     `protobuf:"varint,14,rep,packed,name=bl,proto3" json:"bl,omitempty"`
	By    [][]byte   `protobuf:"bytes,15,rep,name=by,proto3" json:"by,omitempty"`
	E     []JsonEnum `protobuf:"varint,16,rep,packed,name=e,proto3,enum=test.v1.JsonEnum" json:"e,omitempty"`
	Msg   []*Message `protobuf:"bytes,17,rep,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Repeated) Reset() {
	*x = Repeated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repeated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repeated) ProtoMessage() {}

func (x *Repeated) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repeated.ProtoReflect.Descriptor instead.
func (*Repeated) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{4}
}

func (x *Repeated) GetS() []string {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *Repeated) GetI32() []int32 {
	if x != nil {
		return x.I32
	}
	return nil
}

func (x *Repeated) GetI64() []int64 {
	if x != nil {
		return x.I64
	}
	return nil
}

func (x *Repeated) GetU32() []uint32 {
	if x != nil {
		return x.U32
	}
	return nil
}

func (x *Repeated) GetU64() []uint64 {
	if x != nil {
		return x.U64
	}
	return nil
}

func (x *Repeated) GetF32() []float32 {
	if x != nil {
		return x.F32
	}
	return nil
}

func (x *Repeated) GetF64() []float64 {
	if x != nil {
		return x.F64
	}
	return nil
}

func (x *Repeated) GetSi32() []int32 {
	if x != nil {
		return x.Si32
	}
	return nil
}

func (x *Repeated) GetSi64() []int64 {
	if x != nil {
		return x.Si64
	}
	return nil
}

func (x *Repeated) GetFi32() []uint32 {
	if x != nil {
		return x.Fi32
	}
	return nil
}

func (x *Repeated) GetFi64() []uint64 {
	if x != nil {
		return x.Fi64
	}
	return nil
}

func (x *Repeated) GetSfi32() []int32 {
	if x != nil {
		return x.Sfi32
	}
	return nil
}

func (x *Repeated) GetSfi64() []int64 {
	if x != nil {
		return x.Sfi64
	}
	return nil
}

func (x *Repeated) GetBl() []bool {
	if x != nil {
		return x.Bl
	}
	return nil
}

func (x *Repeated) GetBy() [][]byte {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *Repeated) GetE() []JsonEnum {
	if x != nil {
		return x.E
	}
	return nil
}

func (x *Repeated) GetMsg() []*Message {
	if x != nil {
		return x.Msg
	}
	return nil
}

type Optionals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *string   `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	I32   *int32    `protobuf:"varint,2,opt,name=i32,proto3,oneof" json:"i32,omitempty"`
	I64   *int64    `protobuf:"varint,3,opt,name=i64,proto3,oneof" json:"i64,omitempty"`
	U32   *uint32   `protobuf:"varint,4,opt,name=u32,proto3,oneof" json:"u32,omitempty"`
	U64   *uint64   `protobuf:"varint,5,opt,name=u64,proto3,oneof" json:"u64,omitempty"`
	F32   *float32  `protobuf:"fixed32,6,opt,name=f32,proto3,oneof" json:"f32,omitempty"`
	F64   *float64  `protobuf:"fixed64,7,opt,name=f64,proto3,oneof" json:"f64,omitempty"`
	Si32  *int32    `protobuf:"zigzag32,8,opt,name=si32,proto3,oneof" json:"si32,omitempty"`
	Si64  *int64    `protobuf:"zigzag64,9,opt,name=si64,proto3,oneof" json:"si64,omitempty"`
	Fi32  *uint32   `protobuf:"fixed32,10,opt,name=fi32,proto3,oneof" json:"fi32,omitempty"`
	Fi64  *uint64   `protobuf:"fixed64,11,opt,name=fi64,proto3,oneof" json:"fi64,omitempty"`
	Sfi32 *int32    `protobuf:"fixed32,12,opt,name=sfi32,proto3,oneof" json:"sfi32,omitempty"`
	Sfi64 *int64    `protobuf:"fixed64,13,opt,name=sfi64,proto3,oneof" json:"sfi64,omitempty"`
	Bl    *bool     `protobuf:"varint,14,opt,name=bl,proto3,oneof" json:"bl,omitempty"`
	By    []byte    `protobuf:"bytes,15,opt,name=by,proto3,oneof" json:"by,omitempty"`
	S     *Message  `protobuf:"bytes,16,opt,name=s,proto3,oneof" json:"s,omitempty"`
	E     *JsonEnum `protobuf:"varint,17,opt,name=e,proto3,enum=test.v1.JsonEnum,oneof" json:"e,omitempty"`
}

func (x *Optionals) Reset() {
	*x = Optionals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optionals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optionals) ProtoMessage() {}

func (x *Optionals) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optionals.ProtoReflect.Descriptor instead.
func (*Optionals) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{5}
}

func (x *Optionals) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Optionals) GetI32() int32 {
	if x != nil && x.I32 != nil {
		return *x.I32
	}
	return 0
}

func (x *Optionals) GetI64() int64 {
	if x != nil && x.I64 != nil {
		return *x.I64
	}
	return 0
}

func (x *Optionals) GetU32() uint32 {
	if x != nil && x.U32 != nil {
		return *x.U32
	}
	return 0
}

func (x *Optionals) GetU64() uint64 {
	if x != nil && x.U64 != nil {
		return *x.U64
	}
	return 0
}

func (x *Optionals) GetF32() float32 {
	if x != nil && x.F32 != nil {
		return *x.F32
	}
	return 0
}

func (x *Optionals) GetF64() float64 {
	if x != nil && x.F64 != nil {
		return *x.F64
	}
	return 0
}

func (x *Optionals) GetSi32() int32 {
	if x != nil && x.Si32 != nil {
		return *x.Si32
	}
	return 0
}

func (x *Optionals) GetSi64() int64 {
	if x != nil && x.Si64 != nil {
		return *x.Si64
	}
	return 0
}

func (x *Optionals) GetFi32() uint32 {
	if x != nil && x.Fi32 != nil {
		return *x.Fi32
	}
	return 0
}

func (x *Optionals) GetFi64() uint64 {
	if x != nil && x.Fi64 != nil {
		return *x.Fi64
	}
	return 0
}

func (x *Optionals) GetSfi32() int32 {
	if x != nil && x.Sfi32 != nil {
		return *x.Sfi32
	}
	return 0
}

func (x *Optionals) GetSfi64() int64 {
	if x != nil && x.Sfi64 != nil {
		return *x.Sfi64
	}
	return 0
}

func (x *Optionals) GetBl() bool {
	if x != nil && x.Bl != nil {
		return *x.Bl
	}
	return false
}

func (x *Optionals) GetBy() []byte {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *Optionals) GetS() *Message {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *Optionals) GetE() JsonEnum {
	if x != nil && x.E != nil {
		return *x.E
	}
	return JsonEnum_JSON_ENUM_UNSPECIFIED
}

type WKTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A    *anypb.Any              `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	D    *durationpb.Duration    `protobuf:"bytes,2,opt,name=d,proto3" json:"d,omitempty"`
	T    *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
	St   *structpb.Struct        `protobuf:"bytes,4,opt,name=st,proto3" json:"st,omitempty"`
	I32  *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=i32,proto3" json:"i32,omitempty"`
	Ui32 *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=ui32,proto3" json:"ui32,omitempty"`
	I64  *wrapperspb.Int64Value  `protobuf:"bytes,8,opt,name=i64,proto3" json:"i64,omitempty"`
	U64  *wrapperspb.UInt64Value `protobuf:"bytes,13,opt,name=u64,proto3" json:"u64,omitempty"`
	F32  *wrapperspb.FloatValue  `protobuf:"bytes,9,opt,name=f32,proto3" json:"f32,omitempty"`
	F64  *wrapperspb.DoubleValue `protobuf:"bytes,10,opt,name=f64,proto3" json:"f64,omitempty"`
	B    *wrapperspb.BoolValue   `protobuf:"bytes,11,opt,name=b,proto3" json:"b,omitempty"`
	S    *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=s,proto3" json:"s,omitempty"`
	By   *wrapperspb.BytesValue  `protobuf:"bytes,12,opt,name=by,proto3" json:"by,omitempty"`
	Fm   *fieldmaskpb.FieldMask  `protobuf:"bytes,14,opt,name=fm,proto3" json:"fm,omitempty"`
	Em   *emptypb.Empty          `protobuf:"bytes,15,opt,name=em,proto3" json:"em,omitempty"`
	Nu   structpb.NullValue      `protobuf:"varint,16,opt,name=nu,proto3,enum=google.protobuf.NullValue" json:"nu,omitempty"`
	V    *structpb.Value         `protobuf:"bytes,17,opt,name=v,proto3" json:"v,omitempty"`
	Lv   *structpb.ListValue     `protobuf:"bytes,18,opt,name=lv,proto3" json:"lv,omitempty"`
}

func (x *WKTs) Reset() {
	*x = WKTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WKTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WKTs) ProtoMessage() {}

func (x *WKTs) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WKTs.ProtoReflect.Descriptor instead.
func (*WKTs) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{6}
}

func (x *WKTs) GetA() *anypb.Any {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *WKTs) GetD() *durationpb.Duration {
	if x != nil {
		return x.D
	}
	return nil
}

func (x *WKTs) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *WKTs) GetSt() *structpb.Struct {
	if x != nil {
		return x.St
	}
	return nil
}

func (x *WKTs) GetI32() *wrapperspb.Int32Value {
	if x != nil {
		return x.I32
	}
	return nil
}

func (x *WKTs) GetUi32() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Ui32
	}
	return nil
}

func (x *WKTs) GetI64() *wrapperspb.Int64Value {
	if x != nil {
		return x.I64
	}
	return nil
}

func (x *WKTs) GetU64() *wrapperspb.UInt64Value {
	if x != nil {
		return x.U64
	}
	return nil
}

func (x *WKTs) GetF32() *wrapperspb.FloatValue {
	if x != nil {
		return x.F32
	}
	return nil
}

func (x *WKTs) GetF64() *wrapperspb.DoubleValue {
	if x != nil {
		return x.F64
	}
	return nil
}

func (x *WKTs) GetB() *wrapperspb.BoolValue {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *WKTs) GetS() *wrapperspb.StringValue {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *WKTs) GetBy() *wrapperspb.BytesValue {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *WKTs) GetFm() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fm
	}
	return nil
}

func (x *WKTs) GetEm() *emptypb.Empty {
	if x != nil {
		return x.Em
	}
	return nil
}

func (x *WKTs) GetNu() structpb.NullValue {
	if x != nil {
		return x.Nu
	}
	return structpb.NullValue(0)
}

func (x *WKTs) GetV() *structpb.Value {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *WKTs) GetLv() *structpb.ListValue {
	if x != nil {
		return x.Lv
	}
	return nil
}

type RepeatedWKTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A    []*anypb.Any              `protobuf:"bytes,1,rep,name=a,proto3" json:"a,omitempty"`
	D    []*durationpb.Duration    `protobuf:"bytes,2,rep,name=d,proto3" json:"d,omitempty"`
	T    []*timestamppb.Timestamp  `protobuf:"bytes,3,rep,name=t,proto3" json:"t,omitempty"`
	St   []*structpb.Struct        `protobuf:"bytes,4,rep,name=st,proto3" json:"st,omitempty"`
	I32  []*wrapperspb.Int32Value  `protobuf:"bytes,5,rep,name=i32,proto3" json:"i32,omitempty"`
	Ui32 []*wrapperspb.UInt32Value `protobuf:"bytes,7,rep,name=ui32,proto3" json:"ui32,omitempty"`
	I64  []*wrapperspb.Int64Value  `protobuf:"bytes,8,rep,name=i64,proto3" json:"i64,omitempty"`
	U64  []*wrapperspb.UInt64Value `protobuf:"bytes,13,rep,name=u64,proto3" json:"u64,omitempty"`
	F32  []*wrapperspb.FloatValue  `protobuf:"bytes,9,rep,name=f32,proto3" json:"f32,omitempty"`
	F64  []*wrapperspb.DoubleValue `protobuf:"bytes,10,rep,name=f64,proto3" json:"f64,omitempty"`
	B    []*wrapperspb.BoolValue   `protobuf:"bytes,11,rep,name=b,proto3" json:"b,omitempty"`
	S    []*wrapperspb.StringValue `protobuf:"bytes,6,rep,name=s,proto3" json:"s,omitempty"`
	By   []*wrapperspb.BytesValue  `protobuf:"bytes,12,rep,name=by,proto3" json:"by,omitempty"`
	Fm   []*fieldmaskpb.FieldMask  `protobuf:"bytes,14,rep,name=fm,proto3" json:"fm,omitempty"`
	Em   []*emptypb.Empty          `protobuf:"bytes,15,rep,name=em,proto3" json:"em,omitempty"`
	Nu   []structpb.NullValue      `protobuf:"varint,16,rep,packed,name=nu,proto3,enum=google.protobuf.NullValue" json:"nu,omitempty"`
	V    []*structpb.Value         `protobuf:"bytes,17,rep,name=v,proto3" json:"v,omitempty"`
	Lv   []*structpb.ListValue     `protobuf:"bytes,18,rep,name=lv,proto3" json:"lv,omitempty"`
}

func (x *RepeatedWKTs) Reset() {
	*x = RepeatedWKTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedWKTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedWKTs) ProtoMessage() {}

func (x *RepeatedWKTs) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedWKTs.ProtoReflect.Descriptor instead.
func (*RepeatedWKTs) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{7}
}

func (x *RepeatedWKTs) GetA() []*anypb.Any {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *RepeatedWKTs) GetD() []*durationpb.Duration {
	if x != nil {
		return x.D
	}
	return nil
}

func (x *RepeatedWKTs) GetT() []*timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *RepeatedWKTs) GetSt() []*structpb.Struct {
	if x != nil {
		return x.St
	}
	return nil
}

func (x *RepeatedWKTs) GetI32() []*wrapperspb.Int32Value {
	if x != nil {
		return x.I32
	}
	return nil
}

func (x *RepeatedWKTs) GetUi32() []*wrapperspb.UInt32Value {
	if x != nil {
		return x.Ui32
	}
	return nil
}

func (x *RepeatedWKTs) GetI64() []*wrapperspb.Int64Value {
	if x != nil {
		return x.I64
	}
	return nil
}

func (x *RepeatedWKTs) GetU64() []*wrapperspb.UInt64Value {
	if x != nil {
		return x.U64
	}
	return nil
}

func (x *RepeatedWKTs) GetF32() []*wrapperspb.FloatValue {
	if x != nil {
		return x.F32
	}
	return nil
}

func (x *RepeatedWKTs) GetF64() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.F64
	}
	return nil
}

func (x *RepeatedWKTs) GetB() []*wrapperspb.BoolValue {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *RepeatedWKTs) GetS() []*wrapperspb.StringValue {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *RepeatedWKTs) GetBy() []*wrapperspb.BytesValue {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *RepeatedWKTs) GetFm() []*fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fm
	}
	return nil
}

func (x *RepeatedWKTs) GetEm() []*emptypb.Empty {
	if x != nil {
		return x.Em
	}
	return nil
}

func (x *RepeatedWKTs) GetNu() []structpb.NullValue {
	if x != nil {
		return x.Nu
	}
	return nil
}

func (x *RepeatedWKTs) GetV() []*structpb.Value {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *RepeatedWKTs) GetLv() []*structpb.ListValue {
	if x != nil {
		return x.Lv
	}
	return nil
}

type OptionalWKTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A    *anypb.Any              `protobuf:"bytes,1,opt,name=a,proto3,oneof" json:"a,omitempty"`
	D    *durationpb.Duration    `protobuf:"bytes,2,opt,name=d,proto3,oneof" json:"d,omitempty"`
	T    *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=t,proto3,oneof" json:"t,omitempty"`
	St   *structpb.Struct        `protobuf:"bytes,4,opt,name=st,proto3,oneof" json:"st,omitempty"`
	I32  *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=i32,proto3,oneof" json:"i32,omitempty"`
	Ui32 *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=ui32,proto3,oneof" json:"ui32,omitempty"`
	I64  *wrapperspb.Int64Value  `protobuf:"bytes,8,opt,name=i64,proto3,oneof" json:"i64,omitempty"`
	U64  *wrapperspb.UInt64Value `protobuf:"bytes,13,opt,name=u64,proto3,oneof" json:"u64,omitempty"`
	F32  *wrapperspb.FloatValue  `protobuf:"bytes,9,opt,name=f32,proto3,oneof" json:"f32,omitempty"`
	F64  *wrapperspb.DoubleValue `protobuf:"bytes,10,opt,name=f64,proto3,oneof" json:"f64,omitempty"`
	B    *wrapperspb.BoolValue   `protobuf:"bytes,11,opt,name=b,proto3,oneof" json:"b,omitempty"`
	S    *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=s,proto3,oneof" json:"s,omitempty"`
	By   *wrapperspb.BytesValue  `protobuf:"bytes,12,opt,name=by,proto3,oneof" json:"by,omitempty"`
	Fm   *fieldmaskpb.FieldMask  `protobuf:"bytes,14,opt,name=fm,proto3,oneof" json:"fm,omitempty"`
	Em   *emptypb.Empty          `protobuf:"bytes,15,opt,name=em,proto3,oneof" json:"em,omitempty"`
	Nu   *structpb.NullValue     `protobuf:"varint,16,opt,name=nu,proto3,enum=google.protobuf.NullValue,oneof" json:"nu,omitempty"`
	V    *structpb.Value         `protobuf:"bytes,17,opt,name=v,proto3,oneof" json:"v,omitempty"`
	Lv   *structpb.ListValue     `protobuf:"bytes,18,opt,name=lv,proto3,oneof" json:"lv,omitempty"`
}

func (x *OptionalWKTs) Reset() {
	*x = OptionalWKTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalWKTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalWKTs) ProtoMessage() {}

func (x *OptionalWKTs) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalWKTs.ProtoReflect.Descriptor instead.
func (*OptionalWKTs) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{8}
}

func (x *OptionalWKTs) GetA() *anypb.Any {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *OptionalWKTs) GetD() *durationpb.Duration {
	if x != nil {
		return x.D
	}
	return nil
}

func (x *OptionalWKTs) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *OptionalWKTs) GetSt() *structpb.Struct {
	if x != nil {
		return x.St
	}
	return nil
}

func (x *OptionalWKTs) GetI32() *wrapperspb.Int32Value {
	if x != nil {
		return x.I32
	}
	return nil
}

func (x *OptionalWKTs) GetUi32() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Ui32
	}
	return nil
}

func (x *OptionalWKTs) GetI64() *wrapperspb.Int64Value {
	if x != nil {
		return x.I64
	}
	return nil
}

func (x *OptionalWKTs) GetU64() *wrapperspb.UInt64Value {
	if x != nil {
		return x.U64
	}
	return nil
}

func (x *OptionalWKTs) GetF32() *wrapperspb.FloatValue {
	if x != nil {
		return x.F32
	}
	return nil
}

func (x *OptionalWKTs) GetF64() *wrapperspb.DoubleValue {
	if x != nil {
		return x.F64
	}
	return nil
}

func (x *OptionalWKTs) GetB() *wrapperspb.BoolValue {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *OptionalWKTs) GetS() *wrapperspb.StringValue {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *OptionalWKTs) GetBy() *wrapperspb.BytesValue {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *OptionalWKTs) GetFm() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fm
	}
	return nil
}

func (x *OptionalWKTs) GetEm() *emptypb.Empty {
	if x != nil {
		return x.Em
	}
	return nil
}

func (x *OptionalWKTs) GetNu() structpb.NullValue {
	if x != nil && x.Nu != nil {
		return *x.Nu
	}
	return structpb.NullValue(0)
}

func (x *OptionalWKTs) GetV() *structpb.Value {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *OptionalWKTs) GetLv() *structpb.ListValue {
	if x != nil {
		return x.Lv
	}
	return nil
}

type OneOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extra string `protobuf:"bytes,1,opt,name=extra,proto3" json:"extra,omitempty"`
	// Types that are assignable to OneOf:
	//	*OneOf_E
	//	*OneOf_STr
	//	*OneOf_I32
	//	*OneOf_I64
	//	*OneOf_U32
	//	*OneOf_U64
	//	*OneOf_F32
	//	*OneOf_F64
	//	*OneOf_Si32
	//	*OneOf_Si64
	//	*OneOf_Fi32
	//	*OneOf_Fi64
	//	*OneOf_Sfi32
	//	*OneOf_Sfi64
	//	*OneOf_Bl
	//	*OneOf_By
	//	*OneOf_Msg
	OneOf isOneOf_OneOf `protobuf_oneof:"one_of"`
}

func (x *OneOf) Reset() {
	*x = OneOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneOf) ProtoMessage() {}

func (x *OneOf) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneOf.ProtoReflect.Descriptor instead.
func (*OneOf) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{9}
}

func (x *OneOf) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (m *OneOf) GetOneOf() isOneOf_OneOf {
	if m != nil {
		return m.OneOf
	}
	return nil
}

func (x *OneOf) GetE() JsonEnum {
	if x, ok := x.GetOneOf().(*OneOf_E); ok {
		return x.E
	}
	return JsonEnum_JSON_ENUM_UNSPECIFIED
}

func (x *OneOf) GetSTr() string {
	if x, ok := x.GetOneOf().(*OneOf_STr); ok {
		return x.STr
	}
	return ""
}

func (x *OneOf) GetI32() int32 {
	if x, ok := x.GetOneOf().(*OneOf_I32); ok {
		return x.I32
	}
	return 0
}

func (x *OneOf) GetI64() int64 {
	if x, ok := x.GetOneOf().(*OneOf_I64); ok {
		return x.I64
	}
	return 0
}

func (x *OneOf) GetU32() uint32 {
	if x, ok := x.GetOneOf().(*OneOf_U32); ok {
		return x.U32
	}
	return 0
}

func (x *OneOf) GetU64() uint64 {
	if x, ok := x.GetOneOf().(*OneOf_U64); ok {
		return x.U64
	}
	return 0
}

func (x *OneOf) GetF32() float32 {
	if x, ok := x.GetOneOf().(*OneOf_F32); ok {
		return x.F32
	}
	return 0
}

func (x *OneOf) GetF64() float64 {
	if x, ok := x.GetOneOf().(*OneOf_F64); ok {
		return x.F64
	}
	return 0
}

func (x *OneOf) GetSi32() int32 {
	if x, ok := x.GetOneOf().(*OneOf_Si32); ok {
		return x.Si32
	}
	return 0
}

func (x *OneOf) GetSi64() int64 {
	if x, ok := x.GetOneOf().(*OneOf_Si64); ok {
		return x.Si64
	}
	return 0
}

func (x *OneOf) GetFi32() uint32 {
	if x, ok := x.GetOneOf().(*OneOf_Fi32); ok {
		return x.Fi32
	}
	return 0
}

func (x *OneOf) GetFi64() uint64 {
	if x, ok := x.GetOneOf().(*OneOf_Fi64); ok {
		return x.Fi64
	}
	return 0
}

func (x *OneOf) GetSfi32() int32 {
	if x, ok := x.GetOneOf().(*OneOf_Sfi32); ok {
		return x.Sfi32
	}
	return 0
}

func (x *OneOf) GetSfi64() int64 {
	if x, ok := x.GetOneOf().(*OneOf_Sfi64); ok {
		return x.Sfi64
	}
	return 0
}

func (x *OneOf) GetBl() bool {
	if x, ok := x.GetOneOf().(*OneOf_Bl); ok {
		return x.Bl
	}
	return false
}

func (x *OneOf) GetBy() []byte {
	if x, ok := x.GetOneOf().(*OneOf_By); ok {
		return x.By
	}
	return nil
}

func (x *OneOf) GetMsg() *Message {
	if x, ok := x.GetOneOf().(*OneOf_Msg); ok {
		return x.Msg
	}
	return nil
}

type isOneOf_OneOf interface {
	isOneOf_OneOf()
}

type OneOf_E struct {
	E JsonEnum `protobuf:"varint,2,opt,name=e,proto3,enum=test.v1.JsonEnum,oneof"`
}

type OneOf_STr struct {
	STr string `protobuf:"bytes,3,opt,name=s_tr,json=sTr,proto3,oneof"`
}

type OneOf_I32 struct {
	I32 int32 `protobuf:"varint,4,opt,name=i32,proto3,oneof"`
}

type OneOf_I64 struct {
	I64 int64 `protobuf:"varint,5,opt,name=i64,proto3,oneof"`
}

type OneOf_U32 struct {
	U32 uint32 `protobuf:"varint,6,opt,name=u32,proto3,oneof"`
}

type OneOf_U64 struct {
	U64 uint64 `protobuf:"varint,7,opt,name=u64,proto3,oneof"`
}

type OneOf_F32 struct {
	F32 float32 `protobuf:"fixed32,8,opt,name=f32,proto3,oneof"`
}

type OneOf_F64 struct {
	F64 float64 `protobuf:"fixed64,9,opt,name=f64,proto3,oneof"`
}

type OneOf_Si32 struct {
	Si32 int32 `protobuf:"zigzag32,10,opt,name=si32,proto3,oneof"`
}

type OneOf_Si64 struct {
	Si64 int64 `protobuf:"zigzag64,11,opt,name=si64,proto3,oneof"`
}

type OneOf_Fi32 struct {
	Fi32 uint32 `protobuf:"fixed32,12,opt,name=fi32,proto3,oneof"`
}

type OneOf_Fi64 struct {
	Fi64 uint64 `protobuf:"fixed64,13,opt,name=fi64,proto3,oneof"`
}

type OneOf_Sfi32 struct {
	Sfi32 int32 `protobuf:"fixed32,14,opt,name=sfi32,proto3,oneof"`
}

type OneOf_Sfi64 struct {
	Sfi64 int64 `protobuf:"fixed64,15,opt,name=sfi64,proto3,oneof"`
}

type OneOf_Bl struct {
	Bl bool `protobuf:"varint,16,opt,name=bl,proto3,oneof"`
}

type OneOf_By struct {
	By []byte `protobuf:"bytes,17,opt,name=by,proto3,oneof"`
}

type OneOf_Msg struct {
	Msg *Message `protobuf:"bytes,28,opt,name=msg,proto3,oneof"`
}

func (*OneOf_E) isOneOf_OneOf() {}

func (*OneOf_STr) isOneOf_OneOf() {}

func (*OneOf_I32) isOneOf_OneOf() {}

func (*OneOf_I64) isOneOf_OneOf() {}

func (*OneOf_U32) isOneOf_OneOf() {}

func (*OneOf_U64) isOneOf_OneOf() {}

func (*OneOf_F32) isOneOf_OneOf() {}

func (*OneOf_F64) isOneOf_OneOf() {}

func (*OneOf_Si32) isOneOf_OneOf() {}

func (*OneOf_Si64) isOneOf_OneOf() {}

func (*OneOf_Fi32) isOneOf_OneOf() {}

func (*OneOf_Fi64) isOneOf_OneOf() {}

func (*OneOf_Sfi32) isOneOf_OneOf() {}

func (*OneOf_Sfi64) isOneOf_OneOf() {}

func (*OneOf_Bl) isOneOf_OneOf() {}

func (*OneOf_By) isOneOf_OneOf() {}

func (*OneOf_Msg) isOneOf_OneOf() {}

type OneOfWKT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneOf:
	//	*OneOfWKT_A
	//	*OneOfWKT_D
	//	*OneOfWKT_T
	//	*OneOfWKT_St
	//	*OneOfWKT_I32
	//	*OneOfWKT_Ui32
	//	*OneOfWKT_I64
	//	*OneOfWKT_U64
	//	*OneOfWKT_F32
	//	*OneOfWKT_F64
	//	*OneOfWKT_B
	//	*OneOfWKT_S
	//	*OneOfWKT_By
	//	*OneOfWKT_Fm
	//	*OneOfWKT_Em
	//	*OneOfWKT_Nu
	//	*OneOfWKT_V
	//	*OneOfWKT_Lv
	OneOf isOneOfWKT_OneOf `protobuf_oneof:"one_of"`
}

func (x *OneOfWKT) Reset() {
	*x = OneOfWKT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneOfWKT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneOfWKT) ProtoMessage() {}

func (x *OneOfWKT) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneOfWKT.ProtoReflect.Descriptor instead.
func (*OneOfWKT) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{10}
}

func (m *OneOfWKT) GetOneOf() isOneOfWKT_OneOf {
	if m != nil {
		return m.OneOf
	}
	return nil
}

func (x *OneOfWKT) GetA() *anypb.Any {
	if x, ok := x.GetOneOf().(*OneOfWKT_A); ok {
		return x.A
	}
	return nil
}

func (x *OneOfWKT) GetD() *durationpb.Duration {
	if x, ok := x.GetOneOf().(*OneOfWKT_D); ok {
		return x.D
	}
	return nil
}

func (x *OneOfWKT) GetT() *timestamppb.Timestamp {
	if x, ok := x.GetOneOf().(*OneOfWKT_T); ok {
		return x.T
	}
	return nil
}

func (x *OneOfWKT) GetSt() *structpb.Struct {
	if x, ok := x.GetOneOf().(*OneOfWKT_St); ok {
		return x.St
	}
	return nil
}

func (x *OneOfWKT) GetI32() *wrapperspb.Int32Value {
	if x, ok := x.GetOneOf().(*OneOfWKT_I32); ok {
		return x.I32
	}
	return nil
}

func (x *OneOfWKT) GetUi32() *wrapperspb.UInt32Value {
	if x, ok := x.GetOneOf().(*OneOfWKT_Ui32); ok {
		return x.Ui32
	}
	return nil
}

func (x *OneOfWKT) GetI64() *wrapperspb.Int64Value {
	if x, ok := x.GetOneOf().(*OneOfWKT_I64); ok {
		return x.I64
	}
	return nil
}

func (x *OneOfWKT) GetU64() *wrapperspb.UInt64Value {
	if x, ok := x.GetOneOf().(*OneOfWKT_U64); ok {
		return x.U64
	}
	return nil
}

func (x *OneOfWKT) GetF32() *wrapperspb.FloatValue {
	if x, ok := x.GetOneOf().(*OneOfWKT_F32); ok {
		return x.F32
	}
	return nil
}

func (x *OneOfWKT) GetF64() *wrapperspb.DoubleValue {
	if x, ok := x.GetOneOf().(*OneOfWKT_F64); ok {
		return x.F64
	}
	return nil
}

func (x *OneOfWKT) GetB() *wrapperspb.BoolValue {
	if x, ok := x.GetOneOf().(*OneOfWKT_B); ok {
		return x.B
	}
	return nil
}

func (x *OneOfWKT) GetS() *wrapperspb.StringValue {
	if x, ok := x.GetOneOf().(*OneOfWKT_S); ok {
		return x.S
	}
	return nil
}

func (x *OneOfWKT) GetBy() *wrapperspb.BytesValue {
	if x, ok := x.GetOneOf().(*OneOfWKT_By); ok {
		return x.By
	}
	return nil
}

func (x *OneOfWKT) GetFm() *fieldmaskpb.FieldMask {
	if x, ok := x.GetOneOf().(*OneOfWKT_Fm); ok {
		return x.Fm
	}
	return nil
}

func (x *OneOfWKT) GetEm() *emptypb.Empty {
	if x, ok := x.GetOneOf().(*OneOfWKT_Em); ok {
		return x.Em
	}
	return nil
}

func (x *OneOfWKT) GetNu() structpb.NullValue {
	if x, ok := x.GetOneOf().(*OneOfWKT_Nu); ok {
		return x.Nu
	}
	return structpb.NullValue(0)
}

func (x *OneOfWKT) GetV() *structpb.Value {
	if x, ok := x.GetOneOf().(*OneOfWKT_V); ok {
		return x.V
	}
	return nil
}

func (x *OneOfWKT) GetLv() *structpb.ListValue {
	if x, ok := x.GetOneOf().(*OneOfWKT_Lv); ok {
		return x.Lv
	}
	return nil
}

type isOneOfWKT_OneOf interface {
	isOneOfWKT_OneOf()
}

type OneOfWKT_A struct {
	A *anypb.Any `protobuf:"bytes,1,opt,name=a,proto3,oneof"`
}

type OneOfWKT_D struct {
	D *durationpb.Duration `protobuf:"bytes,2,opt,name=d,proto3,oneof"`
}

type OneOfWKT_T struct {
	T *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=t,proto3,oneof"`
}

type OneOfWKT_St struct {
	St *structpb.Struct `protobuf:"bytes,4,opt,name=st,proto3,oneof"`
}

type OneOfWKT_I32 struct {
	I32 *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=i32,proto3,oneof"`
}

type OneOfWKT_Ui32 struct {
	Ui32 *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=ui32,proto3,oneof"`
}

type OneOfWKT_I64 struct {
	I64 *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=i64,proto3,oneof"`
}

type OneOfWKT_U64 struct {
	U64 *wrapperspb.UInt64Value `protobuf:"bytes,13,opt,name=u64,proto3,oneof"`
}

type OneOfWKT_F32 struct {
	F32 *wrapperspb.FloatValue `protobuf:"bytes,9,opt,name=f32,proto3,oneof"`
}

type OneOfWKT_F64 struct {
	F64 *wrapperspb.DoubleValue `protobuf:"bytes,10,opt,name=f64,proto3,oneof"`
}

type OneOfWKT_B struct {
	B *wrapperspb.BoolValue `protobuf:"bytes,11,opt,name=b,proto3,oneof"`
}

type OneOfWKT_S struct {
	S *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=s,proto3,oneof"`
}

type OneOfWKT_By struct {
	By *wrapperspb.BytesValue `protobuf:"bytes,12,opt,name=by,proto3,oneof"`
}

type OneOfWKT_Fm struct {
	Fm *fieldmaskpb.FieldMask `protobuf:"bytes,14,opt,name=fm,proto3,oneof"`
}

type OneOfWKT_Em struct {
	Em *emptypb.Empty `protobuf:"bytes,15,opt,name=em,proto3,oneof"`
}

type OneOfWKT_Nu struct {
	Nu structpb.NullValue `protobuf:"varint,16,opt,name=nu,proto3,enum=google.protobuf.NullValue,oneof"`
}

type OneOfWKT_V struct {
	V *structpb.Value `protobuf:"bytes,17,opt,name=v,proto3,oneof"`
}

type OneOfWKT_Lv struct {
	Lv *structpb.ListValue `protobuf:"bytes,18,opt,name=lv,proto3,oneof"`
}

func (*OneOfWKT_A) isOneOfWKT_OneOf() {}

func (*OneOfWKT_D) isOneOfWKT_OneOf() {}

func (*OneOfWKT_T) isOneOfWKT_OneOf() {}

func (*OneOfWKT_St) isOneOfWKT_OneOf() {}

func (*OneOfWKT_I32) isOneOfWKT_OneOf() {}

func (*OneOfWKT_Ui32) isOneOfWKT_OneOf() {}

func (*OneOfWKT_I64) isOneOfWKT_OneOf() {}

func (*OneOfWKT_U64) isOneOfWKT_OneOf() {}

func (*OneOfWKT_F32) isOneOfWKT_OneOf() {}

func (*OneOfWKT_F64) isOneOfWKT_OneOf() {}

func (*OneOfWKT_B) isOneOfWKT_OneOf() {}

func (*OneOfWKT_S) isOneOfWKT_OneOf() {}

func (*OneOfWKT_By) isOneOfWKT_OneOf() {}

func (*OneOfWKT_Fm) isOneOfWKT_OneOf() {}

func (*OneOfWKT_Em) isOneOfWKT_OneOf() {}

func (*OneOfWKT_Nu) isOneOfWKT_OneOf() {}

func (*OneOfWKT_V) isOneOfWKT_OneOf() {}

func (*OneOfWKT_Lv) isOneOfWKT_OneOf() {}

type Singular struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	E     JsonEnum `protobuf:"varint,2,opt,name=e,proto3,enum=test.v1.JsonEnum" json:"e,omitempty"`
	S     string   `protobuf:"bytes,3,opt,name=s,proto3" json:"s,omitempty"`
	I32   int32    `protobuf:"varint,4,opt,name=i32,proto3" json:"i32,omitempty"`
	I64   int64    `protobuf:"varint,5,opt,name=i64,proto3" json:"i64,omitempty"`
	U32   uint32   `protobuf:"varint,6,opt,name=u32,proto3" json:"u32,omitempty"`
	U64   uint64   `protobuf:"varint,7,opt,name=u64,proto3" json:"u64,omitempty"`
	F32   float32  `protobuf:"fixed32,8,opt,name=f32,proto3" json:"f32,omitempty"`
	F64   float64  `protobuf:"fixed64,9,opt,name=f64,proto3" json:"f64,omitempty"`
	Si32  int32    `protobuf:"zigzag32,10,opt,name=si32,proto3" json:"si32,omitempty"`
	Si64  int64    `protobuf:"zigzag64,11,opt,name=si64,proto3" json:"si64,omitempty"`
	Fi32  uint32   `protobuf:"fixed32,12,opt,name=fi32,proto3" json:"fi32,omitempty"`
	Fi64  uint64   `protobuf:"fixed64,13,opt,name=fi64,proto3" json:"fi64,omitempty"`
	Sfi32 int32    `protobuf:"fixed32,14,opt,name=sfi32,proto3" json:"sfi32,omitempty"`
	Sfi64 int64    `protobuf:"fixed64,15,opt,name=sfi64,proto3" json:"sfi64,omitempty"`
	Bl    bool     `protobuf:"varint,16,opt,name=bl,proto3" json:"bl,omitempty"`
	By    []byte   `protobuf:"bytes,17,opt,name=by,proto3" json:"by,omitempty"`
	Msg   *Message `protobuf:"bytes,18,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Singular) Reset() {
	*x = Singular{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Singular) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Singular) ProtoMessage() {}

func (x *Singular) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Singular.ProtoReflect.Descriptor instead.
func (*Singular) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{11}
}

func (x *Singular) GetE() JsonEnum {
	if x != nil {
		return x.E
	}
	return JsonEnum_JSON_ENUM_UNSPECIFIED
}

func (x *Singular) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (x *Singular) GetI32() int32 {
	if x != nil {
		return x.I32
	}
	return 0
}

func (x *Singular) GetI64() int64 {
	if x != nil {
		return x.I64
	}
	return 0
}

func (x *Singular) GetU32() uint32 {
	if x != nil {
		return x.U32
	}
	return 0
}

func (x *Singular) GetU64() uint64 {
	if x != nil {
		return x.U64
	}
	return 0
}

func (x *Singular) GetF32() float32 {
	if x != nil {
		return x.F32
	}
	return 0
}

func (x *Singular) GetF64() float64 {
	if x != nil {
		return x.F64
	}
	return 0
}

func (x *Singular) GetSi32() int32 {
	if x != nil {
		return x.Si32
	}
	return 0
}

func (x *Singular) GetSi64() int64 {
	if x != nil {
		return x.Si64
	}
	return 0
}

func (x *Singular) GetFi32() uint32 {
	if x != nil {
		return x.Fi32
	}
	return 0
}

func (x *Singular) GetFi64() uint64 {
	if x != nil {
		return x.Fi64
	}
	return 0
}

func (x *Singular) GetSfi32() int32 {
	if x != nil {
		return x.Sfi32
	}
	return 0
}

func (x *Singular) GetSfi64() int64 {
	if x != nil {
		return x.Sfi64
	}
	return 0
}

func (x *Singular) GetBl() bool {
	if x != nil {
		return x.Bl
	}
	return false
}

func (x *Singular) GetBy() []byte {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *Singular) GetMsg() *Message {
	if x != nil {
		return x.Msg
	}
	return nil
}

type Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	En  map[string]JsonEnum                `protobuf:"bytes,1,rep,name=en,proto3" json:"en,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=test.v1.JsonEnum"`
	Msg map[int32]*Nested                  `protobuf:"bytes,2,rep,name=msg,proto3" json:"msg,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Str map[int64]string                   `protobuf:"bytes,3,rep,name=str,proto3" json:"str,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	By  map[bool][]byte                    `protobuf:"bytes,4,rep,name=by,proto3" json:"by,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Bo  map[uint32]bool                    `protobuf:"bytes,5,rep,name=bo,proto3" json:"bo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	An  map[uint64]*anypb.Any              `protobuf:"bytes,6,rep,name=an,proto3" json:"an,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Bn  map[uint64]*wrapperspb.UInt64Value `protobuf:"bytes,7,rep,name=bn,proto3" json:"bn,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Map) Reset() {
	*x = Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{12}
}

func (x *Map) GetEn() map[string]JsonEnum {
	if x != nil {
		return x.En
	}
	return nil
}

func (x *Map) GetMsg() map[int32]*Nested {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *Map) GetStr() map[int64]string {
	if x != nil {
		return x.Str
	}
	return nil
}

func (x *Map) GetBy() map[bool][]byte {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *Map) GetBo() map[uint32]bool {
	if x != nil {
		return x.Bo
	}
	return nil
}

func (x *Map) GetAn() map[uint64]*anypb.Any {
	if x != nil {
		return x.An
	}
	return nil
}

func (x *Map) GetBn() map[uint64]*wrapperspb.UInt64Value {
	if x != nil {
		return x.Bn
	}
	return nil
}

type Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	N *Nested_NestedMessage `protobuf:"bytes,2,opt,name=n,proto3" json:"n,omitempty"`
}

func (x *Nested) Reset() {
	*x = Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nested) ProtoMessage() {}

func (x *Nested) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nested.ProtoReflect.Descriptor instead.
func (*Nested) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{13}
}

func (x *Nested) GetN() *Nested_NestedMessage {
	if x != nil {
		return x.N
	}
	return nil
}

type Nested_NestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	E Nested_NestedMessage_NestedEnum `protobuf:"varint,1,opt,name=e,proto3,enum=test.v1.Nested_NestedMessage_NestedEnum" json:"e,omitempty"`
}

func (x *Nested_NestedMessage) Reset() {
	*x = Nested_NestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nested_NestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nested_NestedMessage) ProtoMessage() {}

func (x *Nested_NestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nested_NestedMessage.ProtoReflect.Descriptor instead.
func (*Nested_NestedMessage) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Nested_NestedMessage) GetE() Nested_NestedMessage_NestedEnum {
	if x != nil {
		return x.E
	}
	return Nested_NestedMessage_NESTED_ENUM_UNSPECIFIED
}

var File_test_v1_test_proto protoreflect.FileDescriptor

var file_test_v1_test_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x19, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x55, 0x0a, 0x09, 0x43, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24,
	0x0a, 0x01, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x01, 0x76, 0x12, 0x22, 0x0a, 0x01, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x01, 0x61, 0x22, 0xb8, 0x11, 0x0a, 0x04, 0x43, 0x61, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x77, 0x6b, 0x74, 0x5f, 0x69, 0x33, 0x32, 0x5f, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x77, 0x6b, 0x74, 0x49, 0x33, 0x32, 0x41, 0x12, 0x37, 0x0a, 0x09, 0x77, 0x6b,
	0x74, 0x5f, 0x69, 0x33, 0x32, 0x5f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x77, 0x6b, 0x74, 0x49,
	0x33, 0x32, 0x42, 0x12, 0x1f, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x33, 0x32, 0x5f, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x49, 0x33, 0x32,
	0x41, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x33, 0x32, 0x5f,
	0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x49, 0x33,
	0x32, 0x42, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x5f, 0x77, 0x6b, 0x74,
	0x5f, 0x69, 0x33, 0x32, 0x5f, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x74,
	0x57, 0x6b, 0x74, 0x49, 0x33, 0x32, 0x41, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0d, 0x6f, 0x70,
	0x74, 0x5f, 0x77, 0x6b, 0x74, 0x5f, 0x69, 0x33, 0x32, 0x5f, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x04,
	0x52, 0x0a, 0x6f, 0x70, 0x74, 0x57, 0x6b, 0x74, 0x49, 0x33, 0x32, 0x42, 0x88, 0x01, 0x01, 0x12,
	0x3b, 0x0a, 0x0b, 0x72, 0x70, 0x74, 0x5f, 0x77, 0x6b, 0x74, 0x5f, 0x69, 0x33, 0x32, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x72, 0x70, 0x74, 0x57, 0x6b, 0x74, 0x49, 0x33, 0x32, 0x12, 0x3c, 0x0a, 0x0b,
	0x6d, 0x61, 0x70, 0x5f, 0x77, 0x6b, 0x74, 0x5f, 0x69, 0x33, 0x32, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x57, 0x6b, 0x74, 0x49, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x6d, 0x61, 0x70, 0x57, 0x6b, 0x74, 0x49, 0x33, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x31,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x62, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x32,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x62, 0x32, 0x12, 0x1a, 0x0a, 0x06, 0x6f, 0x70,
	0x74, 0x5f, 0x62, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x05, 0x6f, 0x70,
	0x74, 0x42, 0x31, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x5f, 0x62, 0x32,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x05, 0x6f, 0x70, 0x74, 0x42, 0x32, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x05, 0x72, 0x70, 0x74, 0x5f, 0x62, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x04, 0x72, 0x70, 0x74, 0x42, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x5f, 0x62,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x6d, 0x61, 0x70, 0x42, 0x12, 0x32, 0x0a, 0x06, 0x77, 0x6b, 0x74, 0x5f, 0x62, 0x31, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x77, 0x6b, 0x74, 0x42, 0x31, 0x12, 0x32, 0x0a, 0x06, 0x77, 0x6b, 0x74,
	0x5f, 0x62, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x77, 0x6b, 0x74, 0x42, 0x32, 0x12, 0x3e, 0x0a,
	0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x77, 0x6b, 0x74, 0x5f, 0x62, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x07,
	0x52, 0x08, 0x6f, 0x70, 0x74, 0x57, 0x6b, 0x74, 0x42, 0x31, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a,
	0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x77, 0x6b, 0x74, 0x5f, 0x62, 0x32, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x08,
	0x52, 0x08, 0x6f, 0x70, 0x74, 0x57, 0x6b, 0x74, 0x42, 0x32, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x09, 0x72, 0x70, 0x74, 0x5f, 0x77, 0x6b, 0x74, 0x5f, 0x62, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72,
	0x70, 0x74, 0x57, 0x6b, 0x74, 0x42, 0x12, 0x36, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x77, 0x6b,
	0x74, 0x5f, 0x62, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x57, 0x6b, 0x74, 0x42,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x57, 0x6b, 0x74, 0x42, 0x12, 0x41,
	0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x77, 0x6b, 0x74, 0x5f, 0x69, 0x33, 0x32, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x57, 0x6b, 0x74, 0x49, 0x33,
	0x32, 0x12, 0x19, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x62, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x12, 0x3d, 0x0a, 0x0b,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x77, 0x6b, 0x74, 0x5f, 0x62, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x57, 0x6b, 0x74, 0x42, 0x12, 0x29, 0x0a, 0x07, 0x72,
	0x70, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06,
	0x72, 0x70, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x61,
	0x70, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x3c, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x77, 0x6b, 0x74, 0x5f, 0x75, 0x36, 0x34,
	0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x57, 0x6b, 0x74, 0x55, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x57, 0x6b, 0x74, 0x55, 0x36, 0x34, 0x12,
	0x2b, 0x0a, 0x05, 0x77, 0x6b, 0x74, 0x5f, 0x76, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x77, 0x6b, 0x74, 0x56, 0x12, 0x2c, 0x0a, 0x05,
	0x77, 0x6b, 0x74, 0x5f, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x77, 0x6b, 0x74, 0x53, 0x12, 0x31, 0x0a, 0x06, 0x77, 0x6b,
	0x74, 0x5f, 0x6c, 0x76, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x77, 0x6b, 0x74, 0x4c, 0x76, 0x12, 0x32, 0x0a,
	0x09, 0x72, 0x70, 0x74, 0x5f, 0x77, 0x6b, 0x74, 0x5f, 0x76, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x70, 0x74, 0x57, 0x6b, 0x74,
	0x56, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x70, 0x74, 0x5f, 0x77, 0x6b, 0x74, 0x5f, 0x73, 0x18, 0x37,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x72,
	0x70, 0x74, 0x57, 0x6b, 0x74, 0x53, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x70, 0x74, 0x5f, 0x77, 0x6b,
	0x74, 0x5f, 0x6c, 0x76, 0x18, 0x38, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x70, 0x74, 0x57, 0x6b, 0x74, 0x4c, 0x76,
	0x1a, 0x59, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x57, 0x6b, 0x74, 0x49, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x4d,
	0x61, 0x70, 0x42, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x57, 0x6b, 0x74, 0x42, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a,
	0x0b, 0x4d, 0x61, 0x70, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x0c, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x0e, 0x4d, 0x61, 0x70,
	0x57, 0x6b, 0x74, 0x55, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x33, 0x32, 0x5f, 0x61, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x33, 0x32, 0x5f, 0x62, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6f, 0x70, 0x74, 0x5f, 0x77, 0x6b, 0x74, 0x5f, 0x69, 0x33, 0x32, 0x5f, 0x61, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x77, 0x6b, 0x74, 0x5f, 0x69, 0x33, 0x32, 0x5f, 0x62, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x62, 0x31, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f,
	0x70, 0x74, 0x5f, 0x62, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x77, 0x6b,
	0x74, 0x5f, 0x62, 0x31, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x77, 0x6b, 0x74,
	0x5f, 0x62, 0x32, 0x22, 0xfa, 0x03, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x01, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x01, 0x72, 0x12, 0x1f, 0x0a, 0x01,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x52, 0x01, 0x73, 0x12, 0x1f, 0x0a,
	0x03, 0x6f, 0x5f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x52, 0x02, 0x6f, 0x46, 0x12, 0x1f,
	0x0a, 0x01, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x01, 0x65, 0x12,
	0x26, 0x0a, 0x05, 0x6f, 0x5f, 0x77, 0x6b, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x57, 0x4b,
	0x54, 0x52, 0x04, 0x6f, 0x57, 0x6b, 0x74, 0x12, 0x1f, 0x0a, 0x03, 0x77, 0x6b, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x4b, 0x54, 0x73, 0x52, 0x03, 0x77, 0x6b, 0x74, 0x12, 0x20, 0x0a, 0x01, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x52, 0x01, 0x6f, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x5f,
	0x77, 0x6b, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x57, 0x4b, 0x54, 0x73,
	0x52, 0x04, 0x72, 0x57, 0x6b, 0x74, 0x12, 0x1d, 0x0a, 0x01, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x52, 0x01, 0x6e, 0x12, 0x1a, 0x0a, 0x01, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x01,
	0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x6c, 0x43, 0x61,
	0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x61, 0x6d, 0x65, 0x6c, 0x43, 0x61, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x77, 0x65,
	0x72, 0x43, 0x61, 0x6d, 0x65, 0x6c, 0x43, 0x61, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x55, 0x70, 0x77, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x6c, 0x43, 0x61, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x5f, 0x77, 0x6b, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x57, 0x4b, 0x54, 0x73, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x57, 0x6b, 0x74,
	0x22, 0xe5, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0c, 0x0a,
	0x01, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x01, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x33, 0x32, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69, 0x33, 0x32, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x36, 0x34, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x33, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x33,
	0x32, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03,
	0x75, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x06, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x03, 0x66, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x33, 0x32, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x11, 0x52, 0x04, 0x73, 0x69, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x36, 0x34, 0x18, 0x09, 0x20, 0x03, 0x28, 0x12, 0x52, 0x04, 0x73, 0x69, 0x36, 0x34, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x69, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x07, 0x52, 0x04, 0x66,
	0x69, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x06, 0x52, 0x04, 0x66, 0x69, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x66, 0x69, 0x33, 0x32,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x05, 0x73, 0x66, 0x69, 0x33, 0x32, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x66, 0x69, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x10, 0x52, 0x05, 0x73, 0x66,
	0x69, 0x36, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x6c, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x08, 0x52,
	0x02, 0x62, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x02, 0x62, 0x79, 0x12, 0x1f, 0x0a, 0x01, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x01, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xc2, 0x04, 0x0a, 0x09, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x69,
	0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x03, 0x69, 0x33, 0x32, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x02, 0x52, 0x03, 0x69, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x33, 0x32,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x03, 0x75, 0x33, 0x32, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52,
	0x03, 0x75, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x03, 0x66, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x03, 0x66,
	0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x33, 0x32, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x11, 0x48, 0x07, 0x52, 0x04, 0x73, 0x69, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x69, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x48, 0x08, 0x52, 0x04,
	0x73, 0x69, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x69, 0x33, 0x32, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x07, 0x48, 0x09, 0x52, 0x04, 0x66, 0x69, 0x33, 0x32, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x66, 0x69, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x48, 0x0a,
	0x52, 0x04, 0x66, 0x69, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x66, 0x69,
	0x33, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x0b, 0x52, 0x05, 0x73, 0x66, 0x69, 0x33,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x66, 0x69, 0x36, 0x34, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x10, 0x48, 0x0c, 0x52, 0x05, 0x73, 0x66, 0x69, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12,
	0x13, 0x0a, 0x02, 0x62, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x02, 0x62,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x0e, 0x52, 0x02, 0x62, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x01, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x0f, 0x52, 0x01, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x01, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x10, 0x52, 0x01,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x69, 0x33, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69, 0x36, 0x34, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x75, 0x33, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x36, 0x34, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x66, 0x33, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x36, 0x34, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x69, 0x33, 0x32, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x36, 0x34, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x66, 0x69, 0x33, 0x32, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x69, 0x36, 0x34, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x66, 0x69, 0x33, 0x32, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x66,
	0x69, 0x36, 0x34, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x62, 0x6c, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x62,
	0x79, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x73, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x65, 0x22, 0x9a, 0x06,
	0x0a, 0x04, 0x57, 0x4b, 0x54, 0x73, 0x12, 0x22, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x01, 0x61, 0x12, 0x27, 0x0a, 0x01, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x01, 0x64, 0x12, 0x28, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x12, 0x27, 0x0a,
	0x02, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x02, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x69, 0x33, 0x32, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x69, 0x33, 0x32, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x75, 0x69, 0x33, 0x32, 0x12, 0x2d, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x2d, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x2e, 0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x66, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x01, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x62, 0x12,
	0x2a, 0x0a, 0x01, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x73, 0x12, 0x2b, 0x0a, 0x02, 0x62,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x62, 0x79, 0x12, 0x2a, 0x0a, 0x02, 0x66, 0x6d, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x02, 0x66, 0x6d, 0x12, 0x26, 0x0a, 0x02, 0x65, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x02, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x02,
	0x6e, 0x75, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x6e, 0x75, 0x12, 0x24, 0x0a, 0x01, 0x76, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x76, 0x12, 0x2a,
	0x0a, 0x02, 0x6c, 0x76, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x6c, 0x76, 0x22, 0xa2, 0x06, 0x0a, 0x0c, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x57, 0x4b, 0x54, 0x73, 0x12, 0x22, 0x0a, 0x01, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x01, 0x61, 0x12,
	0x27, 0x0a, 0x01, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x01, 0x64, 0x12, 0x28, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x01, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x02, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x69,
	0x33, 0x32, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x69, 0x33, 0x32, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x69,
	0x33, 0x32, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x69, 0x33, 0x32, 0x12, 0x2d, 0x0a, 0x03,
	0x69, 0x36, 0x34, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x2e, 0x0a, 0x03, 0x75,
	0x36, 0x34, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x2d, 0x0a, 0x03, 0x66,
	0x33, 0x32, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x2e, 0x0a, 0x03, 0x66, 0x36,
	0x34, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x66, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x01, 0x62, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x01, 0x62, 0x12, 0x2a, 0x0a, 0x01, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x73,
	0x12, 0x2b, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x62, 0x79, 0x12, 0x2a, 0x0a,
	0x02, 0x66, 0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x02, 0x66, 0x6d, 0x12, 0x26, 0x0a, 0x02, 0x65, 0x6d, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x02, 0x65,
	0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x6e, 0x75, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x6e, 0x75, 0x12, 0x24, 0x0a,
	0x01, 0x76, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x01, 0x76, 0x12, 0x2a, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x6c, 0x76, 0x22,
	0xfb, 0x07, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x57, 0x4b, 0x54, 0x73,
	0x12, 0x27, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x48, 0x00, 0x52, 0x01, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x01, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x01, 0x52, 0x01, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02,
	0x52, 0x01, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x02, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x03, 0x52, 0x02, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x04,
	0x52, 0x03, 0x69, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x69, 0x33, 0x32,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x05, 0x52, 0x04, 0x75, 0x69, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x06, 0x52, 0x03, 0x69, 0x36, 0x34,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x07,
	0x52, 0x03, 0x75, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x08, 0x52, 0x03, 0x66, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x03,
	0x66, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x09, 0x52, 0x03, 0x66, 0x36, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x01, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x0a, 0x52, 0x01, 0x62, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x01, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x0b, 0x52, 0x01, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x0c, 0x52, 0x02, 0x62, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x02, 0x66, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x48, 0x0d, 0x52, 0x02, 0x66,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x02, 0x65, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x0e, 0x52, 0x02, 0x65, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x02, 0x6e, 0x75, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x0f, 0x52, 0x02, 0x6e, 0x75, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x01, 0x76, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x10, 0x52, 0x01, 0x76, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x02, 0x6c, 0x76, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x11, 0x52, 0x02, 0x6c, 0x76, 0x88, 0x01, 0x01, 0x42, 0x04,
	0x0a, 0x02, 0x5f, 0x61, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x64, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x74,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69, 0x33, 0x32, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x75, 0x69, 0x33, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69, 0x36, 0x34,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x36, 0x34, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x33, 0x32,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x36, 0x34, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x62, 0x42, 0x04,
	0x0a, 0x02, 0x5f, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x62, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x66, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6e, 0x75,
	0x42, 0x04, 0x0a, 0x02, 0x5f, 0x76, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x76, 0x22, 0xa9, 0x03,
	0x0a, 0x05, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x21, 0x0a,
	0x01, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x01, 0x65,
	0x12, 0x13, 0x0a, 0x04, 0x73, 0x5f, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x73, 0x54, 0x72, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x69, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x36, 0x34,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x12, 0x0a,
	0x03, 0x75, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x75, 0x33,
	0x32, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x03, 0x66, 0x36, 0x34,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x03, 0x66, 0x36, 0x34, 0x12, 0x14, 0x0a,
	0x04, 0x73, 0x69, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x04, 0x73,
	0x69, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x04, 0x73, 0x69, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x12, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x04, 0x66, 0x69, 0x33,
	0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x07, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x33, 0x32, 0x12,
	0x14, 0x0a, 0x04, 0x66, 0x69, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52,
	0x04, 0x66, 0x69, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x05, 0x73, 0x66, 0x69, 0x33, 0x32, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0f, 0x48, 0x00, 0x52, 0x05, 0x73, 0x66, 0x69, 0x33, 0x32, 0x12, 0x16, 0x0a,
	0x05, 0x73, 0x66, 0x69, 0x36, 0x34, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x10, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x66, 0x69, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x02, 0x62, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x02, 0x62, 0x6c, 0x12, 0x10, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x62, 0x79, 0x12, 0x24, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x42,
	0x08, 0x0a, 0x06, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x22, 0xcc, 0x06, 0x0a, 0x08, 0x4f, 0x6e,
	0x65, 0x4f, 0x66, 0x57, 0x4b, 0x54, 0x12, 0x24, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x01, 0x61, 0x12, 0x29, 0x0a, 0x01,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x01, 0x64, 0x12, 0x2a, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x01, 0x74, 0x12, 0x29, 0x0a, 0x02, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x02, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x03, 0x69, 0x33, 0x32, 0x12,
	0x32, 0x0a, 0x04, 0x75, 0x69, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x75,
	0x69, 0x33, 0x32, 0x12, 0x2f, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x69, 0x36, 0x34, 0x12, 0x30, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x2f, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x30, 0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x03, 0x66, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x01, 0x62, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x01, 0x62, 0x12, 0x2c, 0x0a, 0x01, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x01, 0x73, 0x12, 0x2d, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x02,
	0x62, 0x79, 0x12, 0x2c, 0x0a, 0x02, 0x66, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x02, 0x66, 0x6d,
	0x12, 0x28, 0x0a, 0x02, 0x65, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x02, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x02, 0x6e, 0x75,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x02, 0x6e, 0x75, 0x12, 0x26, 0x0a, 0x01, 0x76, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x01, 0x76,
	0x12, 0x2c, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x76, 0x42, 0x08,
	0x0a, 0x06, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x22, 0xe5, 0x02, 0x0a, 0x08, 0x53, 0x69, 0x6e,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x01, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x01, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x69, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x33, 0x32, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x36,
	0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x36, 0x34,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04,
	0x73, 0x69, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x04, 0x73, 0x69, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x33, 0x32,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x66, 0x69, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x69, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x06, 0x52, 0x04, 0x66, 0x69, 0x36, 0x34,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x66, 0x69, 0x33, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0f, 0x52,
	0x05, 0x73, 0x66, 0x69, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x66, 0x69, 0x36, 0x34, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x73, 0x66, 0x69, 0x36, 0x34, 0x12, 0x0e, 0x0a, 0x02,
	0x62, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x62, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x62, 0x79, 0x12, 0x22, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0xf0, 0x05, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x02, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x2e, 0x45, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02, 0x65, 0x6e, 0x12, 0x27,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x73, 0x74, 0x72,
	0x12, 0x24, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x2e, 0x42, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x02, 0x62, 0x79, 0x12, 0x24, 0x0a, 0x02, 0x62, 0x6f, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70,
	0x2e, 0x42, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02, 0x62, 0x6f, 0x12, 0x24, 0x0a, 0x02,
	0x61, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x2e, 0x41, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02,
	0x61, 0x6e, 0x12, 0x24, 0x0a, 0x02, 0x62, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x2e, 0x42, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x02, 0x62, 0x6e, 0x1a, 0x48, 0x0a, 0x07, 0x45, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4a,
	0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x47, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x36, 0x0a, 0x08, 0x53,
	0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x35, 0x0a, 0x07, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x35, 0x0a, 0x07, 0x42, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x4b, 0x0a, 0x07, 0x41, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53,
	0x0a, 0x07, 0x42, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x2b,
	0x0a, 0x01, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x01, 0x6e, 0x1a, 0x72, 0x0a, 0x0d, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x01,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x01, 0x65, 0x22, 0x29, 0x0a, 0x0a, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x2a,
	0x39, 0x0a, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x15, 0x4a,
	0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x4f, 0x4d, 0x45, 0x10, 0x01, 0x42, 0x91, 0x01, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x6c, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x69, 0x74,
	0x65, 0x72, 0x70, 0x62, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x65, 0x73,
	0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x54, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x07, 0x54, 0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x13,
	0x54, 0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x54, 0x65, 0x73, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_v1_test_proto_rawDescOnce sync.Once
	file_test_v1_test_proto_rawDescData = file_test_v1_test_proto_rawDesc
)

func file_test_v1_test_proto_rawDescGZIP() []byte {
	file_test_v1_test_proto_rawDescOnce.Do(func() {
		file_test_v1_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_v1_test_proto_rawDescData)
	})
	return file_test_v1_test_proto_rawDescData
}

var file_test_v1_test_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_test_v1_test_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_test_v1_test_proto_goTypes = []interface{}{
	(JsonEnum)(0),                        // 0: test.v1.JsonEnum
	(Nested_NestedMessage_NestedEnum)(0), // 1: test.v1.Nested.NestedMessage.NestedEnum
	(*Message)(nil),                      // 2: test.v1.Message
	(*CaseValue)(nil),                    // 3: test.v1.CaseValue
	(*Case)(nil),                         // 4: test.v1.Case
	(*All)(nil),                          // 5: test.v1.All
	(*Repeated)(nil),                     // 6: test.v1.Repeated
	(*Optionals)(nil),                    // 7: test.v1.Optionals
	(*WKTs)(nil),                         // 8: test.v1.WKTs
	(*RepeatedWKTs)(nil),                 // 9: test.v1.RepeatedWKTs
	(*OptionalWKTs)(nil),                 // 10: test.v1.OptionalWKTs
	(*OneOf)(nil),                        // 11: test.v1.OneOf
	(*OneOfWKT)(nil),                     // 12: test.v1.OneOfWKT
	(*Singular)(nil),                     // 13: test.v1.Singular
	(*Map)(nil),                          // 14: test.v1.Map
	(*Nested)(nil),                       // 15: test.v1.Nested
	nil,                                  // 16: test.v1.Case.MapWktI32Entry
	nil,                                  // 17: test.v1.Case.MapBEntry
	nil,                                  // 18: test.v1.Case.MapWktBEntry
	nil,                                  // 19: test.v1.Case.MapMsgEntry
	nil,                                  // 20: test.v1.Case.MapEnumEntry
	nil,                                  // 21: test.v1.Case.MapWktU64Entry
	nil,                                  // 22: test.v1.Map.EnEntry
	nil,                                  // 23: test.v1.Map.MsgEntry
	nil,                                  // 24: test.v1.Map.StrEntry
	nil,                                  // 25: test.v1.Map.ByEntry
	nil,                                  // 26: test.v1.Map.BoEntry
	nil,                                  // 27: test.v1.Map.AnEntry
	nil,                                  // 28: test.v1.Map.BnEntry
	(*Nested_NestedMessage)(nil),         // 29: test.v1.Nested.NestedMessage
	(*structpb.Value)(nil),               // 30: google.protobuf.Value
	(*anypb.Any)(nil),                    // 31: google.protobuf.Any
	(*wrapperspb.Int32Value)(nil),        // 32: google.protobuf.Int32Value
	(*wrapperspb.BytesValue)(nil),        // 33: google.protobuf.BytesValue
	(*structpb.Struct)(nil),              // 34: google.protobuf.Struct
	(*structpb.ListValue)(nil),           // 35: google.protobuf.ListValue
	(*durationpb.Duration)(nil),          // 36: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),        // 37: google.protobuf.Timestamp
	(*wrapperspb.UInt32Value)(nil),       // 38: google.protobuf.UInt32Value
	(*wrapperspb.Int64Value)(nil),        // 39: google.protobuf.Int64Value
	(*wrapperspb.UInt64Value)(nil),       // 40: google.protobuf.UInt64Value
	(*wrapperspb.FloatValue)(nil),        // 41: google.protobuf.FloatValue
	(*wrapperspb.DoubleValue)(nil),       // 42: google.protobuf.DoubleValue
	(*wrapperspb.BoolValue)(nil),         // 43: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),       // 44: google.protobuf.StringValue
	(*fieldmaskpb.FieldMask)(nil),        // 45: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),                // 46: google.protobuf.Empty
	(structpb.NullValue)(0),              // 47: google.protobuf.NullValue
}
var file_test_v1_test_proto_depIdxs = []int32{
	30,  // 0: test.v1.CaseValue.v:type_name -> google.protobuf.Value
	31,  // 1: test.v1.CaseValue.a:type_name -> google.protobuf.Any
	32,  // 2: test.v1.Case.wkt_i32_a:type_name -> google.protobuf.Int32Value
	32,  // 3: test.v1.Case.wkt_i32_b:type_name -> google.protobuf.Int32Value
	32,  // 4: test.v1.Case.opt_wkt_i32_a:type_name -> google.protobuf.Int32Value
	32,  // 5: test.v1.Case.opt_wkt_i32_b:type_name -> google.protobuf.Int32Value
	32,  // 6: test.v1.Case.rpt_wkt_i32:type_name -> google.protobuf.Int32Value
	16,  // 7: test.v1.Case.map_wkt_i32:type_name -> test.v1.Case.MapWktI32Entry
	17,  // 8: test.v1.Case.map_b:type_name -> test.v1.Case.MapBEntry
	33,  // 9: test.v1.Case.wkt_b1:type_name -> google.protobuf.BytesValue
	33,  // 10: test.v1.Case.wkt_b2:type_name -> google.protobuf.BytesValue
	33,  // 11: test.v1.Case.opt_wkt_b1:type_name -> google.protobuf.BytesValue
	33,  // 12: test.v1.Case.opt_wkt_b2:type_name -> google.protobuf.BytesValue
	33,  // 13: test.v1.Case.rpt_wkt_b:type_name -> google.protobuf.BytesValue
	18,  // 14: test.v1.Case.map_wkt_b:type_name -> test.v1.Case.MapWktBEntry
	32,  // 15: test.v1.Case.oneof_wkt_i32:type_name -> google.protobuf.Int32Value
	33,  // 16: test.v1.Case.oneof_wkt_b:type_name -> google.protobuf.BytesValue
	2,   // 17: test.v1.Case.rpt_msg:type_name -> test.v1.Message
	19,  // 18: test.v1.Case.map_msg:type_name -> test.v1.Case.MapMsgEntry
	20,  // 19: test.v1.Case.map_enum:type_name -> test.v1.Case.MapEnumEntry
	21,  // 20: test.v1.Case.map_wkt_u64:type_name -> test.v1.Case.MapWktU64Entry
	30,  // 21: test.v1.Case.wkt_v:type_name -> google.protobuf.Value
	34,  // 22: test.v1.Case.wkt_s:type_name -> google.protobuf.Struct
	35,  // 23: test.v1.Case.wkt_lv:type_name -> google.protobuf.ListValue
	30,  // 24: test.v1.Case.rpt_wkt_v:type_name -> google.protobuf.Value
	34,  // 25: test.v1.Case.rpt_wkt_s:type_name -> google.protobuf.Struct
	35,  // 26: test.v1.Case.rpt_wkt_lv:type_name -> google.protobuf.ListValue
	6,   // 27: test.v1.All.r:type_name -> test.v1.Repeated
	13,  // 28: test.v1.All.s:type_name -> test.v1.Singular
	11,  // 29: test.v1.All.o_f:type_name -> test.v1.OneOf
	0,   // 30: test.v1.All.e:type_name -> test.v1.JsonEnum
	12,  // 31: test.v1.All.o_wkt:type_name -> test.v1.OneOfWKT
	8,   // 32: test.v1.All.wkt:type_name -> test.v1.WKTs
	7,   // 33: test.v1.All.o:type_name -> test.v1.Optionals
	9,   // 34: test.v1.All.r_wkt:type_name -> test.v1.RepeatedWKTs
	15,  // 35: test.v1.All.n:type_name -> test.v1.Nested
	14,  // 36: test.v1.All.m:type_name -> test.v1.Map
	10,  // 37: test.v1.All.opt_wkt:type_name -> test.v1.OptionalWKTs
	0,   // 38: test.v1.Repeated.e:type_name -> test.v1.JsonEnum
	2,   // 39: test.v1.Repeated.msg:type_name -> test.v1.Message
	2,   // 40: test.v1.Optionals.s:type_name -> test.v1.Message
	0,   // 41: test.v1.Optionals.e:type_name -> test.v1.JsonEnum
	31,  // 42: test.v1.WKTs.a:type_name -> google.protobuf.Any
	36,  // 43: test.v1.WKTs.d:type_name -> google.protobuf.Duration
	37,  // 44: test.v1.WKTs.t:type_name -> google.protobuf.Timestamp
	34,  // 45: test.v1.WKTs.st:type_name -> google.protobuf.Struct
	32,  // 46: test.v1.WKTs.i32:type_name -> google.protobuf.Int32Value
	38,  // 47: test.v1.WKTs.ui32:type_name -> google.protobuf.UInt32Value
	39,  // 48: test.v1.WKTs.i64:type_name -> google.protobuf.Int64Value
	40,  // 49: test.v1.WKTs.u64:type_name -> google.protobuf.UInt64Value
	41,  // 50: test.v1.WKTs.f32:type_name -> google.protobuf.FloatValue
	42,  // 51: test.v1.WKTs.f64:type_name -> google.protobuf.DoubleValue
	43,  // 52: test.v1.WKTs.b:type_name -> google.protobuf.BoolValue
	44,  // 53: test.v1.WKTs.s:type_name -> google.protobuf.StringValue
	33,  // 54: test.v1.WKTs.by:type_name -> google.protobuf.BytesValue
	45,  // 55: test.v1.WKTs.fm:type_name -> google.protobuf.FieldMask
	46,  // 56: test.v1.WKTs.em:type_name -> google.protobuf.Empty
	47,  // 57: test.v1.WKTs.nu:type_name -> google.protobuf.NullValue
	30,  // 58: test.v1.WKTs.v:type_name -> google.protobuf.Value
	35,  // 59: test.v1.WKTs.lv:type_name -> google.protobuf.ListValue
	31,  // 60: test.v1.RepeatedWKTs.a:type_name -> google.protobuf.Any
	36,  // 61: test.v1.RepeatedWKTs.d:type_name -> google.protobuf.Duration
	37,  // 62: test.v1.RepeatedWKTs.t:type_name -> google.protobuf.Timestamp
	34,  // 63: test.v1.RepeatedWKTs.st:type_name -> google.protobuf.Struct
	32,  // 64: test.v1.RepeatedWKTs.i32:type_name -> google.protobuf.Int32Value
	38,  // 65: test.v1.RepeatedWKTs.ui32:type_name -> google.protobuf.UInt32Value
	39,  // 66: test.v1.RepeatedWKTs.i64:type_name -> google.protobuf.Int64Value
	40,  // 67: test.v1.RepeatedWKTs.u64:type_name -> google.protobuf.UInt64Value
	41,  // 68: test.v1.RepeatedWKTs.f32:type_name -> google.protobuf.FloatValue
	42,  // 69: test.v1.RepeatedWKTs.f64:type_name -> google.protobuf.DoubleValue
	43,  // 70: test.v1.RepeatedWKTs.b:type_name -> google.protobuf.BoolValue
	44,  // 71: test.v1.RepeatedWKTs.s:type_name -> google.protobuf.StringValue
	33,  // 72: test.v1.RepeatedWKTs.by:type_name -> google.protobuf.BytesValue
	45,  // 73: test.v1.RepeatedWKTs.fm:type_name -> google.protobuf.FieldMask
	46,  // 74: test.v1.RepeatedWKTs.em:type_name -> google.protobuf.Empty
	47,  // 75: test.v1.RepeatedWKTs.nu:type_name -> google.protobuf.NullValue
	30,  // 76: test.v1.RepeatedWKTs.v:type_name -> google.protobuf.Value
	35,  // 77: test.v1.RepeatedWKTs.lv:type_name -> google.protobuf.ListValue
	31,  // 78: test.v1.OptionalWKTs.a:type_name -> google.protobuf.Any
	36,  // 79: test.v1.OptionalWKTs.d:type_name -> google.protobuf.Duration
	37,  // 80: test.v1.OptionalWKTs.t:type_name -> google.protobuf.Timestamp
	34,  // 81: test.v1.OptionalWKTs.st:type_name -> google.protobuf.Struct
	32,  // 82: test.v1.OptionalWKTs.i32:type_name -> google.protobuf.Int32Value
	38,  // 83: test.v1.OptionalWKTs.ui32:type_name -> google.protobuf.UInt32Value
	39,  // 84: test.v1.OptionalWKTs.i64:type_name -> google.protobuf.Int64Value
	40,  // 85: test.v1.OptionalWKTs.u64:type_name -> google.protobuf.UInt64Value
	41,  // 86: test.v1.OptionalWKTs.f32:type_name -> google.protobuf.FloatValue
	42,  // 87: test.v1.OptionalWKTs.f64:type_name -> google.protobuf.DoubleValue
	43,  // 88: test.v1.OptionalWKTs.b:type_name -> google.protobuf.BoolValue
	44,  // 89: test.v1.OptionalWKTs.s:type_name -> google.protobuf.StringValue
	33,  // 90: test.v1.OptionalWKTs.by:type_name -> google.protobuf.BytesValue
	45,  // 91: test.v1.OptionalWKTs.fm:type_name -> google.protobuf.FieldMask
	46,  // 92: test.v1.OptionalWKTs.em:type_name -> google.protobuf.Empty
	47,  // 93: test.v1.OptionalWKTs.nu:type_name -> google.protobuf.NullValue
	30,  // 94: test.v1.OptionalWKTs.v:type_name -> google.protobuf.Value
	35,  // 95: test.v1.OptionalWKTs.lv:type_name -> google.protobuf.ListValue
	0,   // 96: test.v1.OneOf.e:type_name -> test.v1.JsonEnum
	2,   // 97: test.v1.OneOf.msg:type_name -> test.v1.Message
	31,  // 98: test.v1.OneOfWKT.a:type_name -> google.protobuf.Any
	36,  // 99: test.v1.OneOfWKT.d:type_name -> google.protobuf.Duration
	37,  // 100: test.v1.OneOfWKT.t:type_name -> google.protobuf.Timestamp
	34,  // 101: test.v1.OneOfWKT.st:type_name -> google.protobuf.Struct
	32,  // 102: test.v1.OneOfWKT.i32:type_name -> google.protobuf.Int32Value
	38,  // 103: test.v1.OneOfWKT.ui32:type_name -> google.protobuf.UInt32Value
	39,  // 104: test.v1.OneOfWKT.i64:type_name -> google.protobuf.Int64Value
	40,  // 105: test.v1.OneOfWKT.u64:type_name -> google.protobuf.UInt64Value
	41,  // 106: test.v1.OneOfWKT.f32:type_name -> google.protobuf.FloatValue
	42,  // 107: test.v1.OneOfWKT.f64:type_name -> google.protobuf.DoubleValue
	43,  // 108: test.v1.OneOfWKT.b:type_name -> google.protobuf.BoolValue
	44,  // 109: test.v1.OneOfWKT.s:type_name -> google.protobuf.StringValue
	33,  // 110: test.v1.OneOfWKT.by:type_name -> google.protobuf.BytesValue
	45,  // 111: test.v1.OneOfWKT.fm:type_name -> google.protobuf.FieldMask
	46,  // 112: test.v1.OneOfWKT.em:type_name -> google.protobuf.Empty
	47,  // 113: test.v1.OneOfWKT.nu:type_name -> google.protobuf.NullValue
	30,  // 114: test.v1.OneOfWKT.v:type_name -> google.protobuf.Value
	35,  // 115: test.v1.OneOfWKT.lv:type_name -> google.protobuf.ListValue
	0,   // 116: test.v1.Singular.e:type_name -> test.v1.JsonEnum
	2,   // 117: test.v1.Singular.msg:type_name -> test.v1.Message
	22,  // 118: test.v1.Map.en:type_name -> test.v1.Map.EnEntry
	23,  // 119: test.v1.Map.msg:type_name -> test.v1.Map.MsgEntry
	24,  // 120: test.v1.Map.str:type_name -> test.v1.Map.StrEntry
	25,  // 121: test.v1.Map.by:type_name -> test.v1.Map.ByEntry
	26,  // 122: test.v1.Map.bo:type_name -> test.v1.Map.BoEntry
	27,  // 123: test.v1.Map.an:type_name -> test.v1.Map.AnEntry
	28,  // 124: test.v1.Map.bn:type_name -> test.v1.Map.BnEntry
	29,  // 125: test.v1.Nested.n:type_name -> test.v1.Nested.NestedMessage
	32,  // 126: test.v1.Case.MapWktI32Entry.value:type_name -> google.protobuf.Int32Value
	33,  // 127: test.v1.Case.MapWktBEntry.value:type_name -> google.protobuf.BytesValue
	2,   // 128: test.v1.Case.MapMsgEntry.value:type_name -> test.v1.Message
	0,   // 129: test.v1.Case.MapEnumEntry.value:type_name -> test.v1.JsonEnum
	40,  // 130: test.v1.Case.MapWktU64Entry.value:type_name -> google.protobuf.UInt64Value
	0,   // 131: test.v1.Map.EnEntry.value:type_name -> test.v1.JsonEnum
	15,  // 132: test.v1.Map.MsgEntry.value:type_name -> test.v1.Nested
	31,  // 133: test.v1.Map.AnEntry.value:type_name -> google.protobuf.Any
	40,  // 134: test.v1.Map.BnEntry.value:type_name -> google.protobuf.UInt64Value
	1,   // 135: test.v1.Nested.NestedMessage.e:type_name -> test.v1.Nested.NestedMessage.NestedEnum
	136, // [136:136] is the sub-list for method output_type
	136, // [136:136] is the sub-list for method input_type
	136, // [136:136] is the sub-list for extension type_name
	136, // [136:136] is the sub-list for extension extendee
	0,   // [0:136] is the sub-list for field type_name
}

func init() { file_test_v1_test_proto_init() }
func file_test_v1_test_proto_init() {
	if File_test_v1_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_v1_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Case); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*All); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repeated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optionals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WKTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedWKTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalWKTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneOfWKT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Singular); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nested_NestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_test_v1_test_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Case_OneofWktI32)(nil),
		(*Case_OneofB)(nil),
		(*Case_OneofWktB)(nil),
	}
	file_test_v1_test_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_test_v1_test_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_test_v1_test_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*OneOf_E)(nil),
		(*OneOf_STr)(nil),
		(*OneOf_I32)(nil),
		(*OneOf_I64)(nil),
		(*OneOf_U32)(nil),
		(*OneOf_U64)(nil),
		(*OneOf_F32)(nil),
		(*OneOf_F64)(nil),
		(*OneOf_Si32)(nil),
		(*OneOf_Si64)(nil),
		(*OneOf_Fi32)(nil),
		(*OneOf_Fi64)(nil),
		(*OneOf_Sfi32)(nil),
		(*OneOf_Sfi64)(nil),
		(*OneOf_Bl)(nil),
		(*OneOf_By)(nil),
		(*OneOf_Msg)(nil),
	}
	file_test_v1_test_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*OneOfWKT_A)(nil),
		(*OneOfWKT_D)(nil),
		(*OneOfWKT_T)(nil),
		(*OneOfWKT_St)(nil),
		(*OneOfWKT_I32)(nil),
		(*OneOfWKT_Ui32)(nil),
		(*OneOfWKT_I64)(nil),
		(*OneOfWKT_U64)(nil),
		(*OneOfWKT_F32)(nil),
		(*OneOfWKT_F64)(nil),
		(*OneOfWKT_B)(nil),
		(*OneOfWKT_S)(nil),
		(*OneOfWKT_By)(nil),
		(*OneOfWKT_Fm)(nil),
		(*OneOfWKT_Em)(nil),
		(*OneOfWKT_Nu)(nil),
		(*OneOfWKT_V)(nil),
		(*OneOfWKT_Lv)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_v1_test_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_v1_test_proto_goTypes,
		DependencyIndexes: file_test_v1_test_proto_depIdxs,
		EnumInfos:         file_test_v1_test_proto_enumTypes,
		MessageInfos:      file_test_v1_test_proto_msgTypes,
	}.Build()
	File_test_v1_test_proto = out.File
	file_test_v1_test_proto_rawDesc = nil
	file_test_v1_test_proto_goTypes = nil
	file_test_v1_test_proto_depIdxs = nil
}
